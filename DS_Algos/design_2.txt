// Design  Question ->->->->->

=========================================================================

1.> Factory Method ->

// Interface  for Library

enum VechileType { VT_TWOWHEELER, VT_THREEWHEELER, VT_FOURWHEELER };

class Vechile{
	public :
	    virtual void printVechile() = 0; // pure virtual function
	    static Vechile* Create(VechileType type);
};

class TwoWheeler : public Vechile 
{
	public:
	    void printVechile()
            {
		cout <<" Two Wheeler Vechile \n";
	    }
};

class ThreeWheeler : public Vechile
{
	public:
	    void printVechile()
            {
		cout <<" Three Wheeler Vechile \n";
	    }

};

class FourWheeler : public Vechile
{
	public:
	    void printVechile()
            {
		cout <<" Four Wheeler Vechile \n";
	    }

};

Vechile* create(VechileType vtyp)
{
	if(type == VT_TWOWHEELER)
	    return new TwoWheeler();
	if(type == VT_THREEWHEELER)
	    return new ThreeWheeler();
	if(type == VT_FOURWHEELER)
	    return new FourWheeler();
	else
	    return Null;
}

class Client
{
	private :
	    Vechile *vtype;
	public :
	    Client()
	    {
                VechileType ty = VT_TWOWHEELER;
	        vtype = Vechile::create(ty);
	    }
	    ~Client()    
            {
                delete[] vtype;
		vtype = Null;
            }
            Vechile *getVechile()
            {            	         
		return vtype;
            }
}


int main()
{
	Client *cl = new Client();
	Vechile *vt = cl->getVechile();
        vt->printVechile();

	return 0;
}