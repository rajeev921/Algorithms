#include <iostream>
#include <string>
#include <list>
#include <vector>
#include <set>
#include <stack>
#include <queue>
#include <map>
#include <algorithm>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cstring>
#include <cmath>

using namespace std;

enum {BUCKET_COUNT = 1024};

struct node {
    int data;
    char *key;
    struct node *next;
};

struct table {
    struct node *array[BUCKET_COUNT];
};

struct table* create_table(){
    
    struct table *t = (struct table *)malloc(sizeof(struct table));
    memset(t->array, NULL, sizeof(struct table));
    
    return t;
}

int hash_code(char *key) {
    
    if(key == NULL){
        return -1;
    }
    else {
        unsigned int temp = 0U;
        
        while(key[i]) {
            temp = temp*65599 + (unsigned char)key[i];
            i++;
        }
    }
    return temp % BUCKET_COUNT ;
}

struct node *create_node(char *key, int data) {
    struct node n = (struct node *)malloc(sizeof(struct node));
    assert(n != NULL);
    n->data = data;
    n->key = key;
    n->next = NULL;
    return n;
}

void table_add(struct table *t, char key, int data) {
    if(key == NULL)
        return;
    else {
        h = hash_code(key);
        if(h == -1) {
            cout <<"Empty key";
            return;
        }
        struct node *n = create_node(key, data);
        n->next = t->array[h];
        t->array[h] = n;
    }    
    
}

void search(struct table *t, char *key, char *val)
{
    
    h = hash_code(key);
    
    struct node *n = t->array[h];
    
    while(n != NULL){
        if(strcmp(n->key, key) == 0){
         *val = n->data;
            return;
        }
        n = n->next;
    }
}

int main() {
	// your code goes here
	struct table *t = create_table(); // table creation
	
    table_add(t, "Ram", 3);	
	table_add(t, "Virendra", 92);
	table_add(t, "Rajeev", 87);
	table_add(t, "Ankita", 67);
	table_add(t, "Pallavi", 45);
	table_add(t, "Ankit", 32);
	table_add(t, "Sunny", 9);
	table_add(t, "Sohan", 4);
	
	int val;
	search(t, "Ram", &val);
	
	return 0;
}
