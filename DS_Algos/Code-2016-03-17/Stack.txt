Use of Stack :- 
====================================================================

Balancing of symbols:
Infix to Postfix/Prefix conversion
Redo-undo features at many places like editors, photoshop.
Forward and backward feature in web browsers
Used in many algorithms like Tower of Hanoi, tree traversals, stock span problem, histogram problem.
Other applications can be Backtracking, Knight tour problem, rat in a maze, N queen problem and sudoku solve

====================================================================
#include <iostream>
using namespace std;

void push (int *ar, int ar_size, int *top, int val) {
    if((*top) == ar_size -1) { // Stack is Full
        return;
    }
    else {
        ++(*top);
        ar[(*top)] = val;
    }
}


void pop(int *ar, int ar_size, int *top) {
    if((*top) == -1) { // Stack is Empty
        return;
    }
    else {
        ar[(*top)] = 0;
        --(*top);
    }
}

int main() {
	// your code goes here
	int _size, no_of_elem, i, top, val;
	
	cin >> _size;
	
	int _ar[_size];
	
	cin >> no_of_elem;
	
	top = -1; // Stack is Empty
	
	// Push the element in the stack
	for(i = 0; i < no_of_elem; ++i) {
	    cin >> val;
	    push(_ar, _size, &top, val);
	}
	
	// pop the element from the stack
	for(i = 0; i < no_of_elem; ++i) {
	     pop(_ar, _size, &top);
	}
	
	return 0;
}

====================================================================

Here are the C++ STL tools for Stacks which are in "stack" header file.

Declaration:

#include<stack>

stack <int> s;
Push:

s.push(element);
Pop:

s.pop();
Top Element:

s.top()
IsEmpty:

s.empty()
Size:

s.size()

====================================================================
