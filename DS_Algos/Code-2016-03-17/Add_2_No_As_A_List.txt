You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

    342 + 465 = 807
Make sure there are no trailing zeros in the output list
So, 7 -> 0 -> 8 -> 0 is not a valid response even though the value is still 807

=================================
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::addTwoNumbers(ListNode* A, ListNode* B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    ListNode *temp,*ptr, *cur;
    temp = ptr = NULL;
    int add, carry, flag;
    add = carry = flag = 0;
    
       
   if(A == NULL && B == NULL){
       return  NULL;
   }
   else {
        while((A != NULL && B != NULL)) {
                add = (A->val + B->val + carry);
                if(add >= 10){
                   carry = add/10;
                   add = add %10;
                }
                else {
                   carry = 0;
                }
                if(ptr == NULL) {
                   ptr = (ListNode *)malloc(sizeof(ListNode));
                   assert(ptr != NULL);
                   ptr->val = add;
                   ptr->next = NULL;
                   temp = cur = ptr; 
                }
                else {
                   ptr = (ListNode *)malloc(sizeof(ListNode));
                   assert(ptr != NULL);
                   ptr->val = add;
                   ptr->next = NULL;
                   cur->next = ptr;
                   cur = cur->next; 
                }
                A = A->next;
                B = B->next; 
           
        }  
      
       while(A != NULL) {
           add = (A->val + carry);
           if(add >= 10){
               carry = add/10;
               add = add %10;
           }
           else {
               carry = 0;
           }
           if(ptr == NULL) {
               ptr = (ListNode *)malloc(sizeof(ListNode));
               assert(ptr != NULL);
               ptr->val = add;
               ptr->next = NULL;
               temp = cur = ptr; 
           }
           else {
               ptr = (ListNode *)malloc(sizeof(ListNode));
               assert(ptr != NULL);
               ptr->val = add;
               ptr->next = NULL;
               cur->next = ptr;
               cur = cur->next; 
           }
           A = A->next;
           
       }
       
       while(B != NULL) {
           add = (B->val + carry);
           if(add >= 10){
               carry = add/10;
               add = add %10;
           }
           else {
               carry = 0;
           }
           if(ptr == NULL) {
               ptr = (ListNode *)malloc(sizeof(ListNode));
               assert(ptr != NULL);
               ptr->val = add;
               ptr->next = NULL;
               temp = cur = ptr; 
           }
           else {
               ptr = (ListNode *)malloc(sizeof(ListNode));
               assert(ptr != NULL);
               ptr->val = add;
               ptr->next = NULL;
               cur->next = ptr;
               cur = cur->next; 
           }
           B = B->next;
       }
       
       if(carry != 0){
           ptr = (ListNode *)malloc(sizeof(ListNode));
               assert(ptr != NULL);
               ptr->val = carry;
               ptr->next = NULL;
               cur->next = ptr;
               cur = cur->next; 
       }
       
   }
   
   return temp;
}
