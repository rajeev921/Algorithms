/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 
 int get_Count(ListNode *temp){
     
      int count = 0;
     if(temp == NULL){
         return 0;
     }
     else {
        
         
         while(temp) {
             count++;
             temp = temp->next;
         }
     }
     return count;
 }
 
 ListNode* find_the_intersection(ListNode *temp1, ListNode *temp2, int d)
 {
     for(int i = 1; i <= d; i++){
         if(temp1 == NULL){
             return NULL;
         }
         temp1 =temp1->next;
     }
     
     while(temp1 != NULL && temp2 != NULL){
         if(temp1 == temp2){
             return temp1;
         }
         else{
             temp1 = temp1->next;
             temp2 = temp2->next;
         }
     }
     
 }
 
ListNode* Solution::getIntersectionNode(ListNode* A, ListNode* B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
    int c1 = get_Count(A);
    int c2 = get_Count(B);
    
    if(c1 > c2) {
       int d = (c1 - c2); 
        return find_the_intersection(A, B, d);
    }
    else {
        int d = (c2 - c1);
        return find_the_intersection(B, A, d);
    }
    
    
}
