// Method 1 with 2 loop

#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <stack>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <cstring>

using namespace std;

vector<int> find_intersection(int A[], int B[], int size_1, int size_2) {
    
    vector<int> vc;
    int count = 0;
    
    for(int i = 0; i < size_1; ++i) {
        for(int j = 0; j < size_2; j++) {
            if(B[j]==A[i]){
                vc.push_back(B[j]);
                count++;
            }
        }
    }
    
    return vc;
}


int main() {
	// your code goes here
	
	int A[] = {2, 3, 5, 10, 17, 19, 35, 42, 49, 53, 59, 75};
	int B[] = {2, 10, 15, 17, 23, 35, 47, 49, 75, 82, 89};
	
	size_t n = sizeof(A)/sizeof(A[0]);
    size_t m = sizeof(B)/sizeof(B[0]);
     
	cout <<"Sizeof both array " << n << "  " << m <<"\n";
	
	vector<int> vc_1 = find_intersection(A, B, n, m);
	
	for(int i = 0; i < vc_1.size(); i++) {
	    cout << vc_1[i] <<" ";
	}
	
	return 0;
}
Time Complexity - O(n^2)

=============================================================

// Method 2 when used binary search 

#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <stack>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <cstring>

using namespace std;

vector<int> find_intersection(int A[], int B[], int size_1, int size_2) {
    
    vector<int> vc;
    int temp;
    
    for(int i = 0; i < size_1; ++i) {
        temp = A[i];
        // Do the binary search in 2nd array as both are sorted 
        int low = 0;
        int end = size_2 -1;
        
        while(low <= end) {
            int mid = low + (end - low)/2;
            
            if(B[mid] == temp){
                vc.push_back(temp);
                break;
            }
            else if (temp > B[mid]) {
                low = mid +1;
            }
            else {
                end = mid -1;
            }
            
        }
        
    }
    
    return vc;
}


int main() {
	// your code goes here
	
	int A[] = {2, 3, 5, 10, 17, 19, 35, 42, 49, 53, 59, 75};
	int B[] = {2, 10, 15, 17, 23, 35, 47, 49, 75, 82, 89};
	
	size_t n = sizeof(A)/sizeof(A[0]);
    size_t m = sizeof(B)/sizeof(B[0]);
     
	cout <<"Sizeof both array " << n << "  " << m <<"\n";
	
	vector<int> vc_1 = find_intersection(A, B, n, m);
	
	for(int i = 0; i < vc_1.size(); i++) {
	    cout << vc_1[i] <<" ";
	}
	
	return 0;
}


=============================================================

// Method 3
