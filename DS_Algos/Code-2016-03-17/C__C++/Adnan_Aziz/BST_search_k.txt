#include <iostream>
#include <string>
#include <list>
#include <vector>
#include <set>
#include <stack>
#include <queue>
#include <map>
#include <algorithm>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cstring>
#include <cmath>

using namespace std;

struct node {
    struct node *left;
    int data;
    struct node *right;
};
/*
void create(struct node **rt, int key) {  // By recursion
    
    if((*rt) == NULL){
        (*rt) = (struct node *)malloc(sizeof(struct node));
        assert((*rt) != NULL);
        (*rt)->data = key;
        (*rt)->left = NULL;
        (*rt)->right = NULL;
    }
    else if(key < (*rt)->data) {
        create(&((*rt)->left), key);
    }
    else {
        create(&((*rt)->right), key);
    }
}

*/

void create(struct node **rt, int data) {  // from loop
    
    struct node *temp = (*rt);
    
    if(temp == NULL) { // creating root
        temp = (struct node *)malloc(sizeof(struct node));
        assert(temp != NULL);
        temp->data = data;
        temp->left = temp->right = NULL;
        (*rt) = temp;
    }
    else {
        while(temp != NULL) {
            
            if(data < temp->data) {
                if(temp->left == NULL){
                    break;
                }
                else {
                    temp = temp->left;
                }
            }
            else if (data >temp->data) {
                if(temp->right == NULL) {
                    break;
                }
                else {
                    temp = temp->right;
                }
            }
            else {
                break;
            }
        } // end of while
        
        if( (data < temp->data) && (temp->left == NULL) ) {
            struct node *n = (struct node *)malloc(sizeof(struct node));
            assert(n != NULL);
            n->data = data;
            n->left = n->right = NULL;
            temp->left = n;
        }
        if( (data > temp->data) && (temp->right == NULL) ) {
            struct node *n = (struct node *)malloc(sizeof(struct node));
            assert(n != NULL);
            n->data = data;
            n->left = n->right = NULL;
            temp->right = n;
        }
        
    }
}

int search_key_inorder(struct node *rt, int key) {   // By Recursion
    if(rt == NULL) {
        return 1;
    }
    else {
        search_key_inorder(rt->left, key);
        if(rt->data == key)
            return 0;
        search_key_inorder(rt->right, key);    
    }
}

int search_key_loop(struct node *rt, int key) {
    if(rt == NULL){
        return 1;
    }
    else {
        struct node *temp = rt;
        
        while(temp != NULL) {
            if(temp->data == key) {
                return 0;
            }
            else if(key < temp->data) {
                temp = temp->left;
            }
            else {
                temp = temp->right;
            }
        }
    }
    
    return 1;
    
}

struct node* larger_then_k_inorder(struct node *rt, int key) {
    if(rt == NULL)
        return NULL;
    else {
        larger_then_k_inorder(rt->left, key);
        if(rt->data == key)
            return rt;
        larger_then_k_inorder(rt->right, key);
    }
}

void crawl_tree_by_Inorder(struct node *rt) {
    if(rt == NULL)
        return;
    else {
        crawl_tree_by_Inorder(rt->left);
            cout << rt->data <<" ";
        crawl_tree_by_Inorder(rt->right);
    }    
}
int main() {
	// your code goes here

    struct node *rt = NULL;
    
    create(&rt, 73);
    create(&rt, 8);
    create(&rt, 9);
    create(&rt, 3);
    create(&rt, 5);
    create(&rt, 1);
    create(&rt, 92);
    create(&rt, 83);
    
    crawl_tree_by_Inorder(rt);
    
    int ret = search_key_inorder(rt, 67);
    
    if(ret == 0)
        cout <<"\n" << "key found in BST";
    else    
        cout <<"\n Key not found in BST";
    
    int ret_1 = search_key_loop(rt, 73);
    
    if(ret_1 == 0)
        cout <<"\n" << "key found in BST";
    else    
        cout <<"\n Key not found in BST";
        
            
    cout <<"\n find the next greater element from 73  ";
    
    struct node *t = larger_then_k_inorder(rt, 73);
    if(t->right = NULL)
        cout <<"Not element found";
    else {
        t = t->right;
        while(t != NULL) {
            if(t->left == NULL)
                break;
            else    
                t = t->left;
        }
        cout <<"\n " << t->data;
    }    
            
	return 0;
}
