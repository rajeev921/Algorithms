// Method 1 -> When the arrray is Sorted

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <set>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <ctime>
#include <cmath>

using namespace std;

int find_pairs(int A[], size_t N, int key)
{
    int i, j = N-1;
    i = 0;
    
    while(i <= j){
        if(A[i] + A[j] == key) {
            cout << "\n Got pair \n" << i << j ;
            return 0;
        }
        else if(A[i] +A[j] > key) {
            j--;
        }
        else {
            i++;
        }
    }
        
    return 1;
}

int main() {
	// your code goes here
	
	int a[] = {1, 5, 7, 9, 13, 19, 23, 29, 31, 38, 42, 47, 54, 60, 61, 69, 72 };
	
	int key;
	cin >> key;
	
	int size_a = sizeof(a)/sizeof(a[0]);
	
	int ret = find_pairs(a, size_a, key);
	if(ret == 1)
	    cout <<"Pair Not found";
	    
	return 0;
}

===================================================================================

// Method 2 sort the array then do the previous method Run time depend upon the sorting if we take Merge sort
// then it will give O(nlogn) but if it is Quick sort the worst case will be o(n^2).

===================================================================================

// Method 3 Use hash table 
