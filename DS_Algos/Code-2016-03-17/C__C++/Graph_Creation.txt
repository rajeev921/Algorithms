// Creat a graph from Adjacency List

// Vertices or vertex or node all are same

// edge


#define MAXV 100

typedef struct {
    int y; // Adjacency info
    int weight; // Edge weight if any
    srtuct edgenode *next; // next edge in list
} edgenode;

typedef struct {
    edgenode *edges[MAXV +1]; // Adjacency info
    int degree[MAXV+1]; // outdegree of each vertex
    int nvertices; //number of vertices in graph
    int nedges; // number of edges in graph
    bool directed; // is the graph directed
}graph;


initialize_graph(graph *g, bool directed)
{
    int i;  //counter

    g->nvertices = 0;
    g->nedges = 0;
    g->directed = directed;

    for(int i = 0; i <= MAXV; i++) {
        g->degree[i] = 0;
    }
 
    for(int i = 0; i <= MAXV; i++) {
        g->edges[i] = NULL;
    }
}

----------------------------------------------------

read_graph(graph *g, bool directed)
{
    int i; // counter
    int m; // no of edges
    int x, y; // vertices in edges

    initialize_graph(g, directed);

    scanf("%d%d",&(g->nvertices),&m);

    for(i = 1; i <= m; i++) {
        scanf("%d%d",&x,&y);
        insert_edge(g, x, y, directed);
    }

}

----------------------------------------------------

insert_edge(graph *g, int x, int y, bool directed)
{

     edgenode *p;

     p = (edgenode *)malloc(sizeof(edgenode));
     assert(p != NULL);
       
     p->weight = NULL;
     p->y = y;
     p->next = g->edges[x];

     g->edges[x] = p; //insert at head of list

     g->degree[x] ++;

     if(directed == FALSE)
          insert_edge(g, y, x, TRUE);
     else
           g->nedges ++;
}     

----------------------------------------------------

print_graph(graph *g)
{
    int i;  //counter
    edgenode *p;  //temporary pointer

    for(i = 1; i <= g->nvertices; i++) {
        printf("%d: ",i);
        p = g->edges[i];

        while(p != NULL) {
            printf(" %d",p->y);
            p = p->next;
        }
        printf("\n");
    }     
}

----------------------------------------------------
int main()
{
    grap *g;

    g = (graph *)malloc(sizeof(graph));
    assert(g != NULL);
     
    insert_edge(g, false);
    read_graph(g, false);     
    print_graph(g);

    return 0;
}

================================================================

// Creation of graph in C++

#include <iostream>
#include <vector>
#include <string>
#include <cassert>

using namespace std;

vector<int> adj[10];

int main()
{
    int x, y, nodes, edges;

    cin >> nodes;  // Number of nodes
    cin >> edges;  // Number of Edges

    for(int i = 0; i < edges; ++i) {
        cin >> x >> y;
        adj[x].push_back(y); // Insert y in adjacency list of x
    }

    for(int i = 1; i <= nodes; ++i) {
        cout << " adjacency list of node " << i << ":";

        for(int j = 0; j < adj[i].size(); ++i) {
             if(j == adj[i].size() -1)
                   cout << adj[i][j];
             else
                   cout << adj[i][j];
        }
    }

    return 0;
}

================================================================
    