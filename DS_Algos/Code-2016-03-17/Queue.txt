Applications of Queue:
Queue is used when things don’t have to be processed immediatly, but have to be processed in First InFirst Out order like Breadth First Search. This property of Queue makes it also useful in following kind of scenarios.

1.> When a resource is shared among multiple consumers. Examples include CPU scheduling, Disk Scheduling.

2.> When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc.

===============================================================================================================

#include <iostream>
#include<cstdio>
#include <cstdlib>
#include <cassert>
#include <string>
#include <algorithm>

using namespace std;

// Inserting element in the queue
void enqueue(int *arr, int _ar_size, int *rear, int val) 
{
    if( (*rear) == _ar_size )
    { // if it is full
        cout<<"Queue is Full \n";
        return;
    }
    else
    {
        arr[(*rear)] = val;
        ++(*rear);
    }
}

// Deleting element from queue
void dequeue(int *arr, int _ar_size, int *front, int *rear) {
    if( (*front) == (*rear) )
    {
        cout<<"Queue is empty \n ";
        return;
    }
    else {
        arr[(*front)] = 0;
        --(*front);
    }
    
}

int main() {
    
    int _size, val, i, no, front , rear;
    
    cin >> _size;  // Size of Array
    
    int _ar[_size];
    
    cin >> no;  // No of element
    
    front = rear = 0;
    
    for(i = 0; i < no; i++) {
        cin >> val;
        enqueue(_ar, _size, &rear, val);
    }
    
    cout <<"\nAfter Enqueue queue is \n";
    
    for(i = front; i < rear; i++) {
        cout <<_ar[i] <<"\t";    
    }
    
    for(i = 0; i < no; i++) {
        dequeue(_ar, _size, &front, &rear);
    }
    
   /* cout <<"\nAfter Dequeue queue is \n";
    
    for(i = front; i < rear; i++) {
        cout <<_ar[i] <<"\t";    
    }
    */
}

====================================================================
C++ provides built-in tools to create and use queues. These tools are in Standard Template Library "queue" header file. You can use these tools after you’ll get comfortable with the functioning of queues.

Declaration:

#include<queue>

queue <int> q;

Enqueue:
q.push(element);

Dequeue:
q.pop();

Front:
q.front()

IsEmpty:
q.empty()

Size:
q.size()
