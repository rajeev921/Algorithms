#include<iostream>
#include <list>
#include <stack>
using namespace std;
class Graph
{
    int V; 
    list<int> *adj;
    void DFSUtil(int v, bool visited[]);
public:
    Graph(int V);
    void addEdge(int v, int w);
    void DFS();
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
}
 
void Graph::DFSUtil(int v, bool visited[])
{
    stack<int> s;
    visited[v] = true;
    cout << v << " ";
    s.push(v);
    int flag;
    while(!s.empty())
    {
 
    	v=s.top();
		flag =0 ;
    	list<int>::iterator i;
    	for(i = adj[v].begin(); i != adj[v].end(); ++i)
        {
	   if(!visited[*i])
	   {
	     	cout << *i << " ";
	       	visited[*i] = true;
	        s.push(*i);
	        v=s.top();
	        flag=1;
	        break;//it insure dfs not bfs
           }	
        }
        if(flag==0)
		{
        	s.pop();
    	}
    } // End of while

}
  
void Graph::DFS()
{
 
    bool *visited = new bool[V];
    for(int i = 0; i < V; i++)
	{
        visited[i] = false;
    }
    DFSUtil(2, visited);
    /*
    |---------------------------------------------------------------|
    |	include this for directed or disconnected graph			    |
    |	*for(int i = 0; i < V; i++)									|
    |	{															|
	|		if(!visited[i])											|
    |        DFSUtil(i, visited);									|
	|	}															|
	|---------------------------------------------------------------|																|	
    */
}
 
int main()
{
 
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);
 
    cout << "Following is Depth First Traversal (starting from vertex 2) \n";
    g.DFS();
 
    return 0;
}