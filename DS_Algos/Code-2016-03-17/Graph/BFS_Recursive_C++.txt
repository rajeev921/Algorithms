#include <iostream>
#include <list>
#include <vector>
#include <stack>
#include <map>
#include <set>
#include <string>
#include <algorithm>
#include <cstdio>
#include <cstdlib>

using namespace std;

class Graph {
    
    int V; // No of vertices
    list<int> *adj; // No of adjacency nodes
    void DFSUtil(int u, bool visited[]);
    
    public:
        Graph(int V);
        void addEdge(int u, int w);
        void DFS();
};

Graph:: Graph(int V) {
    this->V = V;
    adj = new list<int>[V];
}

void Graph:: addEdge(int u, int w) {
    
    adj[u].push_back(w);
}

// Recursive DFS
/*
void Graph:: DFSUtil(int u, bool visited[]){
    
    visited[u] = true;
    cout << u << " ";
    
    list<int>::iterator i;
    
    for(i = adj[u].begin(); i != adj[u].end(); ++i){
        if(!visited[*i]){
            cout <<'\n';
            DFSUtil(*i, visited);
        }
        
    }
}
*/

// Iterative DFS
void DFSUtil(int u, bool visited[]){
    
    stack<int> st;
    
    st.push(u);
    visited[u] = true;
    
    list<int>::iterator i;
    
    while(!st.empty()) {
        
        u = st.top();
        cout << u << " ";
        st.pop();
        
        for(i = adj[u].begin(); i != adj[u].end(); ++i) {
            
            if(!visited[*i]) {
                visited[*i] = true;
                st.push(*i);
            }
        }
    }
} 

void Graph:: DFS() {
    
    bool *visited = new bool[V];
    for(int i = 0; i < V; ++i) {
        visited[i] = false;
    }
    
    //for(int i = 0; i < V; ++i) {
       // if(!visited[i])
            DFSUtil(2, visited);
    //}
}


int main() {
	// your code goes here
	
	Graph g(4);
	
	g.addEdge(0, 1);
	g.addEdge(0, 2);
	g.addEdge(1, 2);
	g.addEdge(2, 0);
	g.addEdge(2, 3);
	g.addEdge(3, 3);
	
	g.DFS();
	return 0;
}