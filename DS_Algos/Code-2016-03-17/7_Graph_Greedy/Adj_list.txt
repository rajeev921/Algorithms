
Adjacency List
0 - 1 - 4
1 - 0 - 4 - 3 - 2
2 - 1 - 3
3 - 2 - 1 - 4
4 - 0 - 1 - 3

#include<stdio.h>
#include<stdlib.h>
#include<assert.h>

// A structure to represent an adjacency list node
typedef struct AdjListNode
{
   int data;
   struct AdjListNode *next;
}AdjListNode;

// A structure to represent an adjacency list
typedef struct AdjList
{
   AdjListNode *head;  // pointer to head node of the list
}AdjList;

// A Structure to represent a graph. ( Agraph is an array of adjacency lists.
// Size of array will be V ( number of vertices in graph).

typedef struct Graph
{
   int V;
   AdjList *array;
}GRAPH;


void addEdge(GRAPH *gph)
{




}

GRAPH* create_graph(int node)
{
  GRAPH *g = (GRAPH *)malloc(sizeof(GRAPH));  
   g->V = node;
   g->array = (AdjList *)malloc(sizeof(AdjList) * node);

    int i;
    for( i = 0; i < node; i++)
    { 
         g->array[i]->head = NULL;
    }

 return g;
}

int main(void)
{
    int no_of_node;

    scanf("%d",&no_of_node);
    GRAPH *gp = create_graph(no_of_node);
    
    addEdge(gp, 0, 4);
    addEdge(gp, 0, 1);
    addEdge(gp, 1, 4);
    addEdge(gp, 1, 3);
    addEdge(gp, 1, 2);   
    addEdge(gp, 2, 3);
    addEdge(gp, 3, 4);
    addEdge(gp, 3, 1);
return 0;
}

==================================================================================================

//Another way

#include <iostream>

#include <cstdio>

using namespace std;


bool A[10][10];


void initialize(int nodes)
{

    int i, j;

         for(i = 0; i < nodes; ++i) {
  
           for(j = 0; j < nodes; ++j) {

                 A[i][j] = false;
      
       }
      
   }

}



void print_Adjacency_List(int nodes) {
 
   int i, j;
  
  
         for(i = 0; i < nodes; ++i) {
   
          for(j = 0; j < nodes; ++j) {
  
               printf("%d  ",A[i][j]);       

             }
   
          printf("\n");
 
        }

}


int main() {
	
// your code goes here

	int x, y, i, nodes;
	
	
cin >> nodes;

	initialize(nodes);

	for(i = 0; i < nodes; ++i) {

	    cin >> x >> y;
	   
 A[x][y] = true;
	
}
	
	
print_Adjacency_List(nodes);
	
return 0;

}
