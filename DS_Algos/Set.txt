
Set 

-----------------------------------------------------------------
// add an element, but do not allow duples [duplicates]
// remove elements
// get count of elements (distinct elements)
// check whether elements are present in set
// Set can add, remove and check the presence of particular element in O(log N), where N is the count of objects in the set.

-----------------------------------------------------------------

set<int> myset;

myset.insert(10); // Insert element 10 in set

myset.find(12); // To check whether some element present in set return true syntax for use    if(myset.find(10) != myset.end())

myset.size();     // return the size of set

myset.erase(5);   // erase 5 from the set

myset.empty();    // return true if container size is 0 otherwise false

myset.emplace("foo"); // create a string and place it in set if it is already present return false no insertion otherwise return true

-----------------------------------------------------------------

//It gives us a simple way to get rid of duplicates in vector, and sort it:
 
vector<int> v; 
 // … 
 set<int> s(all(v)); 
 vector<int> v2(all(s));

=================================================================

#include <iostream>
#include <algorithm>
#include <set>

using namespace std;

int main()
{
   set<int> mySet;
   
   for(int i = 0; i < 10; i++){
       int temp;
       cin >> temp;
       mySet.insert(temp);
   }
   
   set<int> :: iterator itr;
   
   // Retrieving data through iterator
   for(itr = mySet.begin(); itr != mySet.end(); itr++){
       cout << *itr << "  ";
   }
   
   // Another way to go through the set
   while (!mySet.empty())
   {
       std::cout << ' ' << *mySet.begin();
       mySet.erase(mySet.begin());
   }
   
    return 0;    
}

=================================================================
// Use find rather than [] in set because if that element is not // present [] operator will make and insert the node in set.


#include <iostream>
#include <algorithm>
#include <set>

using namespace std;

int main()
{
   set<int> mySet;
   set<int> :: iterator itr;
   
   cout << mySet.size() <<"\n";
    
   for(int i = 0; i < 10; i++){
       int temp;
       cin >> temp;
       mySet.insert(temp);
   }
   
   cout << "\n" << mySet.size() <<"\n";
   
   // Retrieving data through iterator
   for(itr = mySet.begin(); itr != mySet.end(); itr++){
       cout << *itr << "  ";
   }
   
   itr = mySet.find(40);
   if(itr != mySet.end()) {
       mySet.erase(itr);    
   }
   
   cout << "\n";
   for(itr = mySet.begin(); itr != mySet.end(); itr++){
       cout << *itr << "  ";
   }
   
   return 0;    
}


=================================================================

