// Print all the nodes that are k distance from the root

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <iostream>
#include <stack>
#include <queue>
#include <algorithm>
#include <string>
#include <set>
#include <map>

using namespace std;

struct Node {
    int data;
    struct Node *left, *right;
};

int height(struct Node *rt) 
{
    if(rt == NULL) 
    {
        return 0;
    }
    else 
    {
        int lhei = height(rt->left);
        int rhei = height(rt->right);
        
        if(lhei > rhei) 
        {
            return lhei+1;
        }
        else 
        {
            return rhei+1;
        }
    }
}

void max_width_tree(struct Node *rt, int i) 
{
    if(rt == NULL)
    {
        return;
    }
    else if(i == 1) 
    {
        cout << rt->data << "  ";
    }
    else if(i > 1)
    {
        max_width_tree(rt->left, i-1);
        max_width_tree(rt->right, i-1);
    }
}

void level_order(struct Node *rt, int k) 
{
    int max, count;
    max = count = 0;
    
    if(k <= 0) {
        return;
    }
    if(rt == NULL) {
        return;
    }
    else
    {
        int h = height(rt);
        
        if(k > h){
            return ;
        }
        max_width_tree(rt, k);
    }
    return;
}

void inorder(struct Node *rt) {
    
    if(rt == NULL){
        return;
    }
    else {
        inorder(rt->left);
        cout << rt->data << "   ";
        inorder(rt->right);
    }
}

struct Node* addNode(int data) {
    
    struct Node* temp = (struct Node *)malloc(sizeof(struct Node));
    assert(temp != NULL);
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    
    return temp;
}

void create(struct Node **rt, int data) {
    
    if(*rt == NULL) {
        (*rt) = addNode(data);
        return;
    }
    else if(data < (*rt)->data) {
        create( &((*rt)->left), data);        
    }
    else {
        create( &((*rt)->right), data);
    }
    
}

int main()
{
    struct Node *rt = NULL;
    
    for(int i = 1; i <= 7; i++) {
        int temp;
        cin >> temp;
        create(&rt, temp);
    }
    
    inorder(rt);
    
    cout <<"\n";
    
    level_order(rt, 3);
    
    return 0;
}

//Another Method

void printKDistant(node *root , int k)    
{
   if(root == NULL) 
      return;
   if( k == 0 )
   {
      printf( "%d ", root->data );
      return ;
   }
   else
   {      
      printKDistant( root->left, k-1 ) ;
      printKDistant( root->right, k-1 ) ;
   }
}
