=================================================================
Map     #include <map>

-----------------------------------------------------------------

map<string, int> mp;

// Internally map and set are almost always stored as red-black trees.

// Actually map is very much like set, except it contains not just values but pairs <key, value>. 

//Map ensures that at most one pair with specific key exists. 

-----------------------------------------------------------------

M["Top"] = 1; 
M["Coder"] = 2; 
M["SRM"] = 10; 

int x = M["Top"] + M["Coder"]; 

 if(M.find("SRM") != M.end()) { 
      M.erase(M.find("SRM")); // or even M.erase("SRM") 
 } 

-----------------------------------------------------------------

// There is one important difference between map::find() and map::operator []. 
// While map::find() will never change the contents of map, operator [] will create an element if it does not exist.

void f(const map<string, int>& M) { 
      if(M["the meaning"] == 42) { // Error! Cannot use [] on const map objects! 
      } 
      if(M.find("the meaning") != M.end() && M.find("the meaning")->second == 42) { // Correct 
           cout << "Don't Panic!" << endl; 
      } 
 }

=================================================================================================================================================================================





=================================================================================================================================================================================

#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#define all(v) v.begin(), v.end()

using namespace std;

int main() 
{
    
  vector<string> vec_strng;

  for(int i = 0; i < 5; i++) {
        string strn;
        cin >> strn;
        vec_strng.push_back(strn);
  }
 
  map<string, int> mp;

  for(int i = 0; i < 5; i++) {
        int temp;
        cin >> temp;
        string st = vec_strng[i];
        mp[st] = temp;
  }

  cout << vec_strng[0] << "\n" << mp.size() << "\n";

   // o/p - Rajeev   5

=================================================================================================================================================================================


     // Traverse map from iterator
    map<string, int> :: iterator itr, itr_1;

    itr = mp.begin();
    itr_1 = mp.find("Rajeev");

    if(itr != mp.end()) // Always check this
        cout << "\n" << itr->second << "\n" ;
   
    cout << "\n" << itr->first << itr->second << "\n" ;

   for(; itr != mp.end(); itr++)   {           
   // print both the string and int in all node
        cout << itr->first <<"  " << itr->second <<"\n";
        mp.erase(mp.begin());
    } 
    
   cout << "\n" << mp.size();  // O/p -> 0
   //cout << std::mp.find(vec_strng[0])->second;   
    return 0;
}

I/p - 
Rajeev 
Ranjan 
Singh  
Virendra 
Akash 
12 13 26 34 3 

O/P -
Rajeev
5
3
Akash3
Akash  3
Rajeev  12
Ranjan  13
Singh  26
Virendra  34
0
=================================================================
